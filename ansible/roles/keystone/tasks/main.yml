---
- name: import generic tasks
  import_tasks: common.yml

- name: include vars
  include_vars: vars/vars.yml

- name: install memcached
  apt:
    name: ['memcached','python-memcache']
    state: latest

- name: configure memcached
  lineinfile:
    path: /etc/memcached.conf
    regexp: '^-l .+'
    line: "-l {{hostvars['keystone']['ansible_host']}}"
  notify:
    - restart memcached
- name: ensure memcached is running
  service:
    name: memcached
    state: started

- name: install keystone
  apt:
    name: keystone
    state: latest
- name: configure keystone
  ini_file:
    path: /etc/keystone/keystone.conf
    section: "{{item.section}}"
    option: "{{item.option}}"
    value: "{{item.value}}"
  with_items:
    - { section: "database", option: "connection", value: "mysql+pymysql://keystone:{{password}}@mysql/keystone" }
    - { section: "token", option: "provider", value: "fernet" }
  notify:
    - restart keystone
- name: initiate keystone database
  shell: su -s /bin/sh -c "keystone-manage db_sync" keystone && touch /root/.ansible_initiate_keystone_db
  args:
    creates: /root/.ansible_initiate_keystone_db
- name: initiate keystone fernet keys
  shell: |
    keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone && touch /root/.ansible_initiate_keystone_fernet
  args:
    creates: /root/.ansible_initiate_keystone_fernet
- name: initiate keystone
  shell: |
    keystone-manage bootstrap --bootstrap-password {{password}} \
      --bootstrap-admin-url http://{{hostvars['keystone']['public_ip']}}:5000/v3/ \
      --bootstrap-internal-url http://{{hostvars['keystone']['public_ip']}}:5000/v3/ \
      --bootstrap-public-url http://{{hostvars['keystone']['public_ip']}}:5000/v3/ \
      --bootstrap-region-id RegionOne && \
    touch /root/.ansible_initiate_keystone
  args:
    creates: /root/.ansible_initiate_keystone
- name: ensure keystone is running
  service:
    name: keystone
    state: started

- name: install openstack client
  apt:
    name: python-openstackclient
    state: latest
- name: install oslo.log
  apt:
    name: python-oslo.log
    state: latest
- name: create bash_completion.d
  file:
    path: /etc/bash_completion.d/
    state: directory
    mode: 0755
- name: install openstack client bash completion
  shell: |
    openstack complete > /etc/bash_completion.d/openstack
  args:
    creates: /etc/bash_completion.d/openstack

- name: create openrc_admin file
  vars:
    openrc_user: admin
    openrc_password: "{{password}}"
    openrc_project: admin
    openrc_auth_url: "http://{{hostvars['keystone']['public_ip']}}:5000/v3"
  template:
    src: ./config/openrc.j2
    dest: /root/openrc_admin

- name: create project service
  shell: |
    source /root/openrc_admin
    openstack project create \
      --domain default \
      --description "Service Project" \
      service
    [ $? -eq 0 ] && touch /root/.ansible_project_service
  args:
    executable: /bin/bash
    creates: /root/.ansible_project_service
- name: create users for service project
  shell: |
    source /root/openrc_admin
    openstack user create \
      --domain default \
      --password "{{password}}" \
      {{item}}
    [ $? -eq 0 ] && touch /root/.ansible_user_{{item}}
  args:
    executable: /bin/bash
    creates: /root/.ansible_user_{{item}}
  with_items:
    - nova
    - neutron
    - placement
    - glance
    - designate
- name: add admin role to users for service project
  shell: |
    source /root/openrc_admin
    openstack role add \
      --project service \
      --user {{item}} \
      admin
    [ $? -eq 0 ] && touch /root/.ansible_role_admin_{{item}}
  args:
    executable: /bin/bash
    creates: /root/.ansible_role_admin_{{item}}
  with_items:
    - nova
    - neutron
    - placement
    - glance
    - designate
- name: create services
  shell: |
    source /root/openrc_admin
    openstack service create \
      --name {{item}} \
      {{item}}
    [ $? -eq 0 ] && touch /root/.ansible_service_{{item}}
  args:
    executable: /bin/bash
    creates: /root/.ansible_service_{{item}}
  with_items:
    - compute
    - network
    - placement
    - image
    - dns
    - volumev2
    - volumev3
- name: create services endpoints for nova
  shell: |
    source /root/openrc_admin
    openstack endpoint create \
      --region RegionOne \
      compute {{item}} http://{{hostvars['nova']['public_ip']}}:8774/v2.1
    [ $? -eq 0 ] && touch /root/.ansible_endpoint_nova_{{item}}
  args:
    executable: /bin/bash
    creates: /root/.ansible_endpoint_nova_{{item}}
  with_items:
    - public
    - admin
    - internal
- name: create services endpoints for placement
  shell: |
    source /root/openrc_admin
    openstack endpoint create \
      --region RegionOne \
      placement {{item}} http://{{hostvars['placement']['public_ip']}}:8778
    [ $? -eq 0 ] && touch /root/.ansible_endpoint_placement_{{item}}
  args:
    executable: /bin/bash
    creates: /root/.ansible_endpoint_placement_{{item}}
  with_items:
    - public
    - admin
    - internal
- name: create services endpoints for glance
  shell: |
    source /root/openrc_admin
    openstack endpoint create \
      --region RegionOne \
      image {{item}} http://{{hostvars['glance']['public_ip']}}:9292
    [ $? -eq 0 ] && touch /root/.ansible_endpoint_glance_{{item}}
  args:
    executable: /bin/bash
    creates: /root/.ansible_endpoint_glance_{{item}}
  with_items:
    - public
    - admin
    - internal
- name: create services endpoints for neutron
  shell: |
    source /root/openrc_admin
    openstack endpoint create \
      --region RegionOne \
      network {{item}} http://{{hostvars['neutron']['public_ip']}}:9696
    [ $? -eq 0 ] && touch /root/.ansible_endpoint_neutron_{{item}}
  args:
    executable: /bin/bash
    creates: /root/.ansible_endpoint_neutron_{{item}}
  with_items:
    - public
    - admin
    - internal

- name: create services endpoints for designate
  shell: |
    source /root/openrc_admin
    openstack endpoint create \
      --region RegionOne \
      dns {{item}} http://{{hostvars['designate']['public_ip']}}:9001
    [ $? -eq 0 ] && touch /root/.ansible_endpoint_designate_{{item}}
  args:
    executable: /bin/bash
    creates: /root/.ansible_endpoint_designate_{{item}}
  with_items:
    - public
    - admin
    - internal

- name: create project demo
  shell: |
    source /root/openrc_admin
    openstack project create \
      --domain default \
      --description "Demo Project" \
      demo
    [ $? -eq 0 ] && touch /root/.ansible_project_demo
  args:
    executable: /bin/bash
    creates: /root/.ansible_project_demo
- name: create demo user
  shell: |
    source /root/openrc_admin
    openstack user create \
      --domain default \
      --password "{{password}}" \
      demo
    [ $? -eq 0 ] && touch /root/.ansible_user_demo
  args:
    executable: /bin/bash
    creates: /root/.ansible_user_demo
- name: create role user
  shell: |
    source /root/openrc_admin
    openstack role create user
    [ $? -eq 0 ] && touch /root/.ansible_role_create_user
  args:
    executable: /bin/bash
    creates: /root/.ansible_role_create_user
- name: add user role to demo user for demo project
  shell: |
    source /root/openrc_admin
    openstack role add \
      --project demo \
      --user demo \
      user
    [ $? -eq 0 ] && touch /root/.ansible_role_user_demo
  args:
    executable: /bin/bash
    creates: /root/.ansible_role_user_demo
